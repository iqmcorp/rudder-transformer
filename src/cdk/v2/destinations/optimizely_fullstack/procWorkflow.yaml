bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ./config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - name: getIntegrationsObj
    path: ../../../../v0/util
  - name: formatTimeStamp
    path: ../../../../v0/util
  - name: getFieldValueFromMessage
    path: ../../../../v0/util
  - name: getHashFromArray
    path: ../../../../v0/util
  - name: handleHttpRequest
    path: ../../../../adapters/network
  - path: ./utils
    exportAll: true
  - path: ./config
    exportAll: true

steps:
  - name: validateInput
    template: |
      let messageType = .message.type;
      $.assert(.message.type, "message Type is not present. Aborting.");
      $.assert(messageType in {{$.EventType.([.IDENTIFY, .TRACK, .PAGE, .SCREEN])}}, 
        "message type " + messageType + " is not supported");
      $.assertConfig(.destination.Config.dataFileUrl, "Data File Url is not present. Aborting");
      $.assertConfig(.destination.Config.accountId, "Account ID is not present. Aborting");
      $.assertConfig(.destination.Config.campaignId, "Campaign ID is not present. Aborting");
      $.assertConfig(.destination.Config.experimentId, "Experiment ID is not present. Aborting");

  - name: messageType
    template: |
      .message.type.toLowerCase()

  - name: validateInputForTrack
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    template: |
      $.assert(.message.event, "Event is not present. Aborting.")

  - name: validateInputForPageAndScreen
    condition: $.outputs.messageType in [{{$.EventType.PAGE}}, {{$.EventType.SCREEN}}]
    template: |
      $.assert(.message.name ?? .message.properties.category, "Name/Category is not present. Aborting.");

  - name: dataFile
    template: |
      const dataFileUrl = .destination.Config.dataFileUrl;
      const rawResponse = await $.handleHttpRequest("get", dataFileUrl);
      const processedResponse = rawResponse.processedResponse;
      $.assertNetwork(processedResponse, "Data File Lookup Failed");
      processedResponse.response

  - name: validateDateFileForTrackPageAndScreen
    condition: $.outputs.messageType in [ {{$.EventType.TRACK}}, {{$.EventType.PAGE}}, {{$.EventType.SCREEN}}]
    template: |
      const availableEvents = $.outputs.dataFile.events;
      $.assert(Array.isArray(availableEvents) && availableEvents.length > 0, "No events are not present in the data file");

  - name: extractExperimentIds
    template: |
      const integrationObj = $.getIntegrationsObj(.message, "optimizely_fullstack");
      $.assert(integrationObj.variationId, "Variation ID is not present. Please pass the variation ID in the integrations object.");
      {
        "campaignId": integrationObj.campaignId,
        "experimentId": integrationObj.experimentId,
        "variationId": integrationObj.variationId
      }

  - name: clientInfo
    template: |
      {
        "client_name": "RudderStack",
        "client_version": "1.0.0"
      }

  - name: commonPayload
    template: |
      {
         "account_id": .destination.Config.accountId,
         "project_id": .destination.Config.projectId,
         "anonymize_ip": .destination.Config.anonymizeIp || false,
         "enrich_decisions": .destination.Config.enrichDecisions || true,
         ...$.outputs.clientInfo
       }

  - name: getAttributes
    template: |
      let traits = .message.().(
        {{{{$.getGenericPaths("traits")}}}};
      );
      traits = $.removeUndefinedAndNullValues(traits);
      const attributeMap = $.getHashFromArray(.destination.Config.attributeMapping, 'from', 'to', false);
      const availableAttributes = $.outputs.dataFile.attributes;
      const attributes = $.prepareAttributes(attributeMap, traits, availableAttributes);

  - name: prepareIdentifyPayload
    condition: $.outputs.messageType === {{$.EventType.IDENTIFY}}
    steps:
      - name: decisions
        template: |
          [{
            "campaign_id": $.outputs.extractExperimentIds.campaignId || .destination.Config.campaignId, 
            "experiment_id": $.outputs.extractExperimentIds.experimentId || .destination.Config.experimentId, 
            "variation_id": $.outputs.extractExperimentIds.variationId,
          }];

      - name: events
        template: |
          [{
            "entity_id": $.outputs.extractExperimentIds.campaignId || .destination.Config.campaignId, 
            "type": "campaign_activated", 
            "timestamp": $.formatTimeStamp(.message.timestamp),
            "uuid": .message.messageId
          }];

      - name: visitors
        template: |
          const snapshots = [{
            "decisions": $.outputs.prepareIdentifyPayload.decisions,
            "events": $.outputs.prepareIdentifyPayload.events
          }];
          const visitorId = .destination.Config.trackKnownUsers ? .message.userId : .message.anonymousId;
          const sessionId = .message.().(
            {{{{$.getGenericPaths("sessionId")}}}};
          );
          [{
            "visitor_id": visitorId,
            "session_id": sessionId,
            "attributes": $.outputs.getAttributes,
            "snapshots": snapshots
          }];

      - name: payload
        template: |
          {
            ...$.outputs.commonPayload,
            "visitors": $.outputs.prepareIdentifyPayload.visitors
          };

  - name: prepareTrackPayload
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    steps:
      - name: mappedEvent
        template: |
          const eventsMap = $.getHashFromArray(.destination.Config.eventMapping, 'from', 'to');
          const eventInLowerCase = .message.event.toLowerCase();
          const mappedEvent = eventsMap[eventInLowerCase];
          mappedEvent || eventInLowerCase;

      - name: eventId
        template: |
          const availableEvents = $.outputs.dataFile.events;
          const eventFound = availableEvents.(){.key === $.outputs.prepareTrackPayload.mappedEvent};
          $.assert(eventFound, "Given event " + $.outputs.prepareTrackPayload.mappedEvent + " is not present in data file. Make sure event exists in Optimizely.");
          eventFound.id;

      - name: events
        template: |
          [{
            "entity_id": $.outputs.prepareTrackPayload.eventId,
            "timestamp": $.formatTimeStamp(.message.timestamp),
            "key": $.outputs.prepareTrackPayload.mappedEvent,
            "uuid": .message.messageId,
            "quantity": .message.properties.quantity,
            "revenue": .message.properties.revenue ? Math.floor(.message.properties.revenue * 100),
            "tags": .message.properties
          }];

      - name: visitors
        template: |
          const snapshots = [{
            "decisions": [],
            "events": $.outputs.prepareTrackPayload.events
          }];
          const visitorId = .destination.Config.trackKnownUser ? .message.userId : .message.anonymousId;
          const sessionId = .message.().(
            {{{{$.getGenericPaths("sessionId")}}}};
          );
          [{
            "visitor_id": visitorId,
            "session_id": sessionId,
            "attributes": $.outputs.getAttributes,
            "snapshots": snapshots
          }];

      - name: payload
        template: |
          {
             ...$.outputs.commonPayload,
            "visitors": $.outputs.prepareTrackPayload.visitors
          };

  - name: preparePageOrScreenPayload
    condition: $.outputs.messageType in [{{$.EventType.PAGE}}, {{$.EventType.SCREEN}}]
    steps:
      - name: mappedEvents
        template: |
          const eventsMap = $.getHashFromArray(.destination.Config.pageMapping, 'from', 'to');
          const category = .message.properties.category.toLowerCase();
          const name = .message.name.toLowerCase();
          const mappedEvents = [];
          .destination.Config.trackCategorizedPages && eventsMap[category] ? mappedEvents.push(eventsMap[category]);
          .destination.Config.trackNamedPages && eventsMap[name] ? mappedEvents.push(eventsMap[name]);
          console.log("mappedEvents", mappedEvents);
          console.log("eventsMap", eventsMap);
          $.assert(mappedEvents.length > 0, "No mapped event found for " + $.outputs.messageType + 
          " call. Make sure to map the event in 'RudderStack Page Name/Category to Optimizely event mappings' setting");
          mappedEvents;

      - name: eventIds
        template: |
          const mappedEvents = $.outputs.preparePageOrScreenPayload.mappedEvents;
          const availableEvents = $.outputs.dataFile.events;
          const eventIds = [];
          let id = availableEvents.(){.key.toLowerCase() === mappedEvents[0].toLowerCase()}.id;
          id ? eventIds.push(id);

          id = availableEvents.(){.key.toLowerCase() === mappedEvents[1].toLowerCase()}.id;
          id ? eventIds.push(id);

          $.assert(eventIds.length > 0, "Mapped events [" + mappedEvents.join(", ") + "] are not present in the data file. Make sure events exist in Optimizely.");
          console.log("eventIds", eventIds);
          eventIds;

      - name: events
        template: |
          const eventIds = $.outputs.preparePageOrScreenPayload.eventIds;
          const events = [
            {
            "entity_id": eventIds[0],
            "timestamp": $.formatTimeStamp(.message.timestamp),
            "key": $.outputs.preparePageOrScreenPayload.mappedEvents[0],
            "uuid": .message.messageId,
            "tags": .message.properties
            }
          ];

          eventIds.length > 1 ? events.push({
            "entity_id": eventIds[1],
            "timestamp": $.formatTimeStamp(.message.timestamp),
            "key": $.outputs.preparePageOrScreenPayload.mappedEvents[1],
            "uuid": .message.messageId,
            "tags": .message.properties
          });
          events;

      - name: visitors
        template: |
          const snapshots = [{
            "decisions": [],
            "events": $.outputs.preparePageOrScreenPayload.events
          }];
          const visitorId = .destination.Config.trackKnownUser ? .message.userId : .message.anonymousId;
          const sessionId = .message.().(
            {{{{$.getGenericPaths("sessionId")}}}};
          );
          [{
            "visitor_id": visitorId,
            "session_id": sessionId,
            "attributes": $.outputs.getAttributes,
            "snapshots": snapshots
          }];

      - name: payload
        template: |
          {
            ...$.outputs.commonPayload,
            "visitors": $.outputs.preparePageOrScreenPayload.visitors,
          };

  - name: buildResponseForProcessTransformation
    description: build response
    template: |
      const messageType = $.outputs.messageType;
      const payload = (messageType === {{$.EventType.IDENTIFY}} ? $.outputs.prepareIdentifyPayload:
                      messageType === {{$.EventType.TRACK}} ? $.outputs.prepareTrackPayload: $.outputs.preparePageOrScreenPayload);
      const response = $.defaultRequestConfig();
      response.body.JSON = $.removeUndefinedAndNullValues(payload);
      response.endpoint = $.ENDPOINT;
      response.headers = {
          "Content-Type": "application/json"
        };
      console.log("response", JSON.stringify(response));
      finalResponse = response;
