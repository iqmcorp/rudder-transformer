bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ./config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util

steps:
  - name: validateInput
    template: |
      let messageType = .message.type;
      $.assert(.message.type, "message Type is not present. Aborting message.");
      $.assert(.message.type.toLowerCase(), "Event type " + .message.type.toLowerCase() + " is not supported. Aborting message.");
      $.assert(.message.properties, "Message properties is not present. Aborting message.");
      $.assert(.message.properties.listData, "listData is not present inside properties. Aborting message.");
      $.assert(.message.properties.listData.[$.BINGADS_SUPPORTED_OPERATION], "The only supported operation for audience updationn" +$.BINGADS_SUPPORTED_OPERATION+ " is not present. Aborting message.");
      $.assert($.AUDIENCE_ATTRIBUTE[.destination.Config.audienceType.toUpperCase()], "Audience Type" + .destination.Config.audienceType + " is not supported. Aborting message.");

  - name: prepareAudienceTypeList
    description: |
      Populate list of identifiers to be updated
    template: |
      const listArray = .message.properties.listData.add;
      const hashRequired = .destination.Config.hashRequired;
      list = listArray@prop.listData.({
          "hashedEmail": hashRequired ?? SHA256(.email) : .email,
          "email": .email
      })

  - name: payload
    template: |
      const outputPayload = {
       "list": $.outputs.prepareAudienceTypeList
      }

  - name: buildResponseForProcessTransformation
    description: build response
    template: |
      const response = $.defaultRequestConfig();
      response.body.JSON = $.outputs.payload;
      response.endpoint = $.ENDPOINT;
      response.headers = {
          "DY-API-Key": .destination.Config.apiKey,
          "Content-Type": "application/json"
        };
      finalResponse = response;
