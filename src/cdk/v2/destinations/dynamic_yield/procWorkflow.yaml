bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../../../v0/destinations/dynamic_yield/config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - path: ../../bindings/jsontemplate

steps:
  - name: validateInput
    template: |
      let messageType = .message.type;
      $.assert(.message.type, "message Type is not present. Aborting message.");
      $.assertConfig(.destination.Config.apiKey, "Invalid Api Key");
      $.assert(messageType in {{$.EventType.([.IDENTIFY, .TRACK])}}, 
        "message type " + messageType + " is not supported")

  - name: messageType
    template: |
      .message.type.toLowerCase()

  - name: validateInputForTrack
    description: Additional validation for Track events
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    template: |
      $.assert(.message.event, "event_name could not be mapped. Aborting.")

  - name: commonFields
    description: |
      Builds common fields in destination payload.
    template: |
      let commonFields = .message.().({
        "user": { "id": {{{{$.getGenericPaths("userId")}}}}},
        "session": {"custom": $.toString({{{{$.getGenericPaths("sessionId")}}}})},
        "context":{"device":{"ip": .context.ip}}
      });
      $.removeUndefinedAndNullValues(commonFields)

  - name: validateCommonFields
    template: |
      const userId = $.outputs.commonFields.user.id;
      const sessionId = $.outputs.commonFields.session.custom;
      const ip = $.outputs.commonFields.context.device.ip;
      $.assert(userId, "userId is required");
      $.assert(sessionId, "sessionId is required");
      $.assert(ip, "ip is required");

  - name: prepareIdentifyPayload
    condition: $.outputs.messageType === {{$.EventType.IDENTIFY}}
    steps:
      - name: propertiesFields
        template: |
          let hashedEmail = .message.().(
            {{{{$.getGenericPaths("email")}}}};
            );
          hashedEmail = hashedEmail? sha256(hashedEmail): hashedEmail;
          let properties = {
            "hashedEmail": hashedEmail,
            "dyType": 'identify-v1'
          };
          properties = $.removeUndefinedAndNullValues(properties);
      - name: updatedPropertiesFields
        condition: $.outputs.prepareIdentifyPayload.propertiesFields.hashedEmail === null
        template: |
          let cuid = $.outputs.commonFields.user.id;
          const updatedProperties = {
            "dyType": 'identify-v1'
            "cuidType": "userId",
            "cuid": cuid
          };
      - name: events
        template: |
          let properties = $.outputs.updatedPropertiesFields? $.outputs.updatedPropertiesFields : $.outputs.propertiesFields;
          let events = {
            "eventsObj": {
              "name": "Identify User",
              "properties": properties
            }
          }[];

  - name: prepareTrackPayload
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    steps:
      - name: getTrimmedEvent
        template: |
          const trimmedEvent = .message.event.toLowerCase().trim().replace(/\s+/g, '_');

      - name: populateEventProperties
        condition: trimmedEvent in ["product_added", "product_removed", "product_added_to_wishlist", "order_completed"]
        steps:
          - name: propulateEcommProperties
            template: |
              const properties = {
                "dyType": `${ecomEventsMapping[event].toLowerCase().trim().replace(/\s+/g, '-')}-v1`,
                "value": Number(parseFloat(messageProperties.price).toFixed(2)),
                "currency": .message.properties.currency,
              }
          - name: updateOrderCompletedEventProperties
            condition: $.outputs.getTrimmedEvent === 'order_completed'
            template: |
              const updatedProperties = {
                ...$.outputs.populateEventProperties.propulateEcommProperties,
                "uniqueTransactionId" : .message.properties.order_id,
                "value": .message.properties.value || .message.properties.revenue || .message.properties.price;
              }

          - name: updateOtherEventProperties
            condition: $.outputs.getTrimmedEvent !== 'order_completed'
            template: |
              const updatedProperties = {
                ...$.outputs.populateEventProperties.propulateEcommProperties,
                "quantity" : .message.properties.quantity,
                "productId": .message.properties.sku || .message.properties.product_id;
              }

          - name: populateCartObj
            condition: .message.properties.products && Array.isArray(.message.properties.products)
            template: |
              const cart = {
                "cartObj": {
                  "productId": .message.properties@prop.products.({
                  "quantity": Number(.quantity ?? prop.quantity ?? 1),
                  "itemPrice": String(.price ?? prop.price)
                  })[]
                }
               }[];

  - name: payload
    condition: $.outputs.messageType === {{$.EventType.IDENTIFY}}
    template: |
      const outputPayload = {
        ...$.outputs.commonFields,
        "events": $.outputs.prepareIdentifyPayload
        }
    else:
      name: trackPayload
      template: |
        const outputPayload = {
        ...$.outputs.commonFields,
        "events": $.outputs.prepareTrackPayload
        }

  - name: buildResponseForProcessTransformation
    description: build response
    template: |
      {
        "body": {
          "JSON": $.outputs.payload,
          "JSON_ARRAY": {},
          "XML": {},
          "FORM": {}
        },
        "version": "1",
        "type": "REST",
        "method": "POST",
        "endpoint": {{$.BASE_URL}},
        "headers": {
          "DY-API-Key": .destination.Config.apiKey,
          "Content-Type": "application/json"
        },
        "params": {},
        "files": {}
      }
